name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4.3.0
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 app/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 app/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format check with black
      run: |
        black --check app/ tests/

    - name: Import sorting check with isort
      run: |
        isort --check-only app/ tests/

    - name: Run unit tests
      run: |
        pytest tests/ -v -m "not integration and not slow" --cov=app --cov-report=xml

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run security checks with bandit
      run: |
        bandit -r app/ -f json -o bandit-report.json || true

    - name: Check dependencies for known vulnerabilities
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v5.0.0
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # build:
  #   runs-on: ubuntu-latest
  #   needs: [test, security]
  #   if: github.ref == 'refs/heads/main'

  #   steps:
  #   - uses: actions/checkout@v5

  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3

  #   - name: Login to Docker Hub
  #     uses: docker/login-action@v3
  #     with:
  #       username: ${{ secrets.DOCKER_USERNAME }}
  #       password: ${{ secrets.DOCKER_PASSWORD }}

  #   - name: Build and push Docker image
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: .
  #       push: true
  #       tags: |
  #         ${{ secrets.DOCKER_USERNAME }}/aru-link-api:latest
  #         ${{ secrets.DOCKER_USERNAME }}/aru-link-api:${{ github.sha }}
  #       cache-from: type=gha
  #       cache-to: type=gha,mode=max

  performance:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run performance tests
      run: |
        pytest tests/ -v -m "slow" --benchmark-only --benchmark-json=benchmark.json

    - name: Upload benchmark results
      uses: actions/upload-artifact@v5.0.0
      with:
        name: benchmark-results
        path: benchmark.json

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   environment: production

  #   steps:
  #   - name: Deploy to production
  #     run: |
  #       echo "Deploying to production..."
  #       # Aquí irían los comandos de despliegue real
  #       # Por ejemplo, usando kubectl, docker-compose, etc.

  notify:
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: always()

    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.security.result == 'success'
      run: |
        echo "✅ All checks passed successfully!"

    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.security.result == 'failure'
      run: |
        echo "❌ Some checks failed. Please review the logs."